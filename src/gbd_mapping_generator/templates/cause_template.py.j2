"""Mapping templates for GBD causes.

This code is automatically generated by gbd_mapping_generator/cause_builder.py

Any manual changes will be lost.
"""
from __future__ import annotations

from .base_template import GbdRecord, ModelableEntity, Restrictions
from .etiology_template import Etiology
from .id import Unknown, {{ c_id_type|lower }}, {{ me_id_type|lower }}
from .sequela_template import Sequela


class Cause(ModelableEntity):
    """Container for cause GBD ids and metadata"""

    __slots__ = (
        "name",
        "kind",
        "gbd_id",
        "me_id",
        "most_detailed",
        "level",
        "restrictions",
        "parent",
        "sub_causes",
        "sequelae",
        "etiologies",
    )

    def __init__(
        self,
        name: str,
        kind: str,
        gbd_id: {{ c_id_type|lower }},
        me_id: {{ me_id_type|lower }} | Unknown,
        most_detailed: bool,
        level: int,
        restrictions: Restrictions,
        parent: Cause | None = None,
        sub_causes: tuple[Cause, ...] | None = None,
        sequelae: tuple[Sequela, ...] | None = None,
        etiologies: tuple[Etiology, ...] | None = None,
    ):
        super().__init__(name=name, kind=kind, gbd_id=gbd_id)
        self.name = name
        self.kind = kind
        self.gbd_id = gbd_id
        self.me_id = me_id
        self.most_detailed = most_detailed
        self.level = level
        self.restrictions = restrictions
        self.parent = parent
        self.sub_causes = sub_causes
        self.sequelae = sequelae
        self.etiologies = etiologies


class Causes(GbdRecord):
    """Container for GBD causes."""

    __slots__ = (
{% for cause_name in cause_names %}
        "{{ cause_name }}",
{% endfor %}
    )

    def __init__(self, **kwargs):
        super().__init__()
{% for cause_name in cause_names %}
        self.{{ cause_name }} = kwargs.get("{{ cause_name }}")
{% endfor %}
