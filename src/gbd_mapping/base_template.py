"""Template classes for GBD entities

This code is automatically generated by gbd_mapping_generator/base_template_builder.py

Any manual changes will be lost.
"""
from typing import Union, Tuple
from .id import cid, sid, hsid, meid, covid, reiid, scalar


class GbdRecord:
    """Base class for entities modeled in the GBD."""
    __slots__ = ()
    
    def to_dict(self):
        out = {}
        for item in self.__slots__:
            attr = getattr(self, item)
            if isinstance(attr, GbdRecord):
                out[item] = attr.to_dict()
            elif isinstance(attr, Tuple):
                if isinstance(attr[0], GbdRecord):
                    out[item] = tuple(r.to_dict() for r in attr)
            else:
                out[item] = attr
        return out        

    def __contains__(self, item):
        return item in self.__slots__

    def __getitem__(self, item):
        if item in self:
            return getattr(self, item)
        else:
            raise KeyError(item)

    def __iter__(self):
        for item in self.__slots__:
            yield getattr(self, item)

    def __repr__(self):
        out = f'{self.__class__.__name__}('
        for i, slot in enumerate(self.__slots__):
            attr = self[slot]
            if attr is None:
                continue
            if i != 0:
                out += ','
            out += f'\n{slot}='
            if isinstance(attr, tuple):
                out += '['+','.join([entity.name for entity in attr]) + ']'
            else:
                out += repr(attr)
        return out + ')'


class ModelableEntity(GbdRecord):
    """Container for general GBD ids and metadata."""
    __slots__ = ('name', 'kind', 'gbd_id', )

    def __init__(self,
                 name: str,
                 kind: str,
                 gbd_id: Union[cid, sid, hsid, meid, covid, reiid, None], ):
        super().__init__()
        self.name = name
        self.kind = kind
        self.gbd_id = gbd_id


class Restrictions(GbdRecord):
    """Container for information about sub-populations the entity describes."""
    __slots__ = ('male_only', 'female_only', 'yll_only', 'yld_only', 'yll_age_start', 'yll_age_end', 'yld_age_start',
                 'yld_age_end', )

    def __init__(self,
                 male_only: bool,
                 female_only: bool,
                 yll_only: bool,
                 yld_only: bool,
                 yll_age_start: scalar = None,
                 yll_age_end: scalar = None,
                 yld_age_start: scalar = None,
                 yld_age_end: scalar = None, ):
        super().__init__()
        self.male_only = male_only
        self.female_only = female_only
        self.yll_only = yll_only
        self.yld_only = yld_only
        self.yll_age_start = yll_age_start
        self.yll_age_end = yll_age_end
        self.yld_age_start = yld_age_start
        self.yld_age_end = yld_age_end


class Tmred(GbdRecord):
    """Container for theoretical minimum risk exposure distribution data."""
    __slots__ = ('distribution', 'min', 'max', 'inverted', )

    def __init__(self,
                 distribution: str,
                 min: scalar,
                 max: scalar,
                 inverted: bool, ):
        super().__init__()
        self.distribution = distribution
        self.min = min
        self.max = max
        self.inverted = inverted


class Levels(GbdRecord):
    """Container for categorical risk exposure levels."""
    __slots__ = ('cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12',
                 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22', 'cat23',
                 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29', 'cat30', 'cat31', 'cat32', 'cat33', 'cat34',
                 'cat35', 'cat36', 'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43', 'cat44', 'cat45',
                 'cat46', 'cat47', 'cat48', 'cat49', 'cat50', 'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56',
                 'cat57', 'cat58', 'cat59', )

    def __init__(self,
                 cat1: str,
                 cat2: str,
                 cat3: str = None,
                 cat4: str = None,
                 cat5: str = None,
                 cat6: str = None,
                 cat7: str = None,
                 cat8: str = None,
                 cat9: str = None,
                 cat10: str = None,
                 cat11: str = None,
                 cat12: str = None,
                 cat13: str = None,
                 cat14: str = None,
                 cat15: str = None,
                 cat16: str = None,
                 cat17: str = None,
                 cat18: str = None,
                 cat19: str = None,
                 cat20: str = None,
                 cat21: str = None,
                 cat22: str = None,
                 cat23: str = None,
                 cat24: str = None,
                 cat25: str = None,
                 cat26: str = None,
                 cat27: str = None,
                 cat28: str = None,
                 cat29: str = None,
                 cat30: str = None,
                 cat31: str = None,
                 cat32: str = None,
                 cat33: str = None,
                 cat34: str = None,
                 cat35: str = None,
                 cat36: str = None,
                 cat37: str = None,
                 cat38: str = None,
                 cat39: str = None,
                 cat40: str = None,
                 cat41: str = None,
                 cat42: str = None,
                 cat43: str = None,
                 cat44: str = None,
                 cat45: str = None,
                 cat46: str = None,
                 cat47: str = None,
                 cat48: str = None,
                 cat49: str = None,
                 cat50: str = None,
                 cat51: str = None,
                 cat52: str = None,
                 cat53: str = None,
                 cat54: str = None,
                 cat55: str = None,
                 cat56: str = None,
                 cat57: str = None,
                 cat58: str = None,
                 cat59: str = None, ):
        super().__init__()
        self.cat1 = cat1
        self.cat2 = cat2
        self.cat3 = cat3
        self.cat4 = cat4
        self.cat5 = cat5
        self.cat6 = cat6
        self.cat7 = cat7
        self.cat8 = cat8
        self.cat9 = cat9
        self.cat10 = cat10
        self.cat11 = cat11
        self.cat12 = cat12
        self.cat13 = cat13
        self.cat14 = cat14
        self.cat15 = cat15
        self.cat16 = cat16
        self.cat17 = cat17
        self.cat18 = cat18
        self.cat19 = cat19
        self.cat20 = cat20
        self.cat21 = cat21
        self.cat22 = cat22
        self.cat23 = cat23
        self.cat24 = cat24
        self.cat25 = cat25
        self.cat26 = cat26
        self.cat27 = cat27
        self.cat28 = cat28
        self.cat29 = cat29
        self.cat30 = cat30
        self.cat31 = cat31
        self.cat32 = cat32
        self.cat33 = cat33
        self.cat34 = cat34
        self.cat35 = cat35
        self.cat36 = cat36
        self.cat37 = cat37
        self.cat38 = cat38
        self.cat39 = cat39
        self.cat40 = cat40
        self.cat41 = cat41
        self.cat42 = cat42
        self.cat43 = cat43
        self.cat44 = cat44
        self.cat45 = cat45
        self.cat46 = cat46
        self.cat47 = cat47
        self.cat48 = cat48
        self.cat49 = cat49
        self.cat50 = cat50
        self.cat51 = cat51
        self.cat52 = cat52
        self.cat53 = cat53
        self.cat54 = cat54
        self.cat55 = cat55
        self.cat56 = cat56
        self.cat57 = cat57
        self.cat58 = cat58
        self.cat59 = cat59


class ExposureParameters(GbdRecord):
    """Container for continuous risk exposure distribution parameters"""
    __slots__ = ('scale', 'max_rr', )

    def __init__(self,
                 scale: scalar = None,
                 max_rr: scalar = None, ):
        super().__init__()
        self.scale = scale
        self.max_rr = max_rr
