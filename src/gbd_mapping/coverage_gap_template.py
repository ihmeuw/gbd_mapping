"""Mapping templates for coverage gap data.

This code is automatically generated by gbd_mapping_generator/coverage_gap_builder.py

Any manual changes will be lost.
"""
from typing import Tuple, Union

from .id import reiid
from .base_template import GbdRecord, Categories, Restrictions
from .cause_template import Cause
from .risk_factor_template import RiskFactor


class CoverageGap(GbdRecord):
    """Container for coverage gap GBD ids and metadata."""
    __slots__ = ('name', 'kind', 'gbd_id', 'restrictions', 'distribution', 'categories', 'affected_causes',
                 'affected_risk_factors', )

    def __init__(self,
                 name: str,
                 kind: str,
                 gbd_id: Union[reiid, None],
                 restrictions: Restrictions,
                 distribution: str,
                 categories: Categories,
                 affected_causes: Tuple[Cause, ...] = None,
                 affected_risk_factors: Tuple[RiskFactor, ...] = None, ):
        super().__init__()
        self.name = name
        self.kind = kind
        self.gbd_id = gbd_id
        self.restrictions = restrictions
        self.distribution = distribution
        self.categories = categories
        self.affected_causes = affected_causes
        self.affected_risk_factors = affected_risk_factors


class CoverageGaps(GbdRecord):
    """Container for coverage gap data."""
    __slots__ = ('lack_of_breastfeeding_promotion', 'lack_of_eggs', 'lack_of_vitamin_a_fortification', )

    def __init__(self,
                 lack_of_breastfeeding_promotion: CoverageGap,
                 lack_of_eggs: CoverageGap,
                 lack_of_vitamin_a_fortification: CoverageGap, ):
        super().__init__()
        self.lack_of_breastfeeding_promotion = lack_of_breastfeeding_promotion
        self.lack_of_eggs = lack_of_eggs
        self.lack_of_vitamin_a_fortification = lack_of_vitamin_a_fortification
